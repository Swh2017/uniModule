<template>
	<view class="tabs">
		<scroll-view ref="tabbar1" id="tab-bar" class="tab-bar" :scroll="false" :scroll-x="true" :show-scrollbar="false"
			:scroll-into-view="scrollInto">
			<view style="flex-direction: column;">
				<view style="flex-direction: row;">
					<view class="uni-tab-item" v-for="(tab,index) in tabList" :key="'tab' + index" :id=" 'tab'+index "
						:ref="'tabitem'+index" :data-id="index" :data-current="index" @click="ontabtap" style="position: relative;">
						<text :style="{width: showWidth(tab)}"  style="text-align: center; padding-top: 5rpx;"
							:class="tabIndex==index ? 'uni-tab-item-title-active' : 'uni-tab-item-title' ">{{tab.name}}</text>
					</view>
				</view>
				
				<view class="scroll-view-indicator">
					<view v-show="undeline.width > 0" id="underline" ref="underline" class="scroll-view-underline" :class="isTap ? 'scroll-view-animation':''"
						:style="{left: indicatorLineLeft + 'px'}" 
						style="width: 55rpx; display: flex; flex-direction: row; align-items: center;">
						<view style="width: 8rpx; height: 6rpx;border-radius: 3rpx; background-color: #fC1855;"></view>
						<view style="flex: 1; margin-left: 3rpx; height: 6rpx;border-radius: 3rpx; background-color: #fC1855;"></view>
					</view>
				</view>
				
			</view>
		</scroll-view>
	</view>
</template>

<script>
	// #ifdef APP-PLUS
	const dom = weex.requireModule('dom');
	// #endif
	// 缓存每页最多
	const MAX_CACHE_DATA = 100;
	// 缓存页签数量
	const MAX_CACHE_PAGE = 3;
	const TAB_PRELOAD_OFFSET = 1;

	export default {
		props: {
			tabList: {
				type: Array,
				default: () => {
					return [{
						name: '关注',
						newsid: 1
					}, {
						name: '推荐',
						newsid: 2
					}, {
						name: '上新',
						newsid: 3
					}, {
						name: '人口普查',
						newsid: 4
					}, {
						name: '听听',
						newsid: 5
					}, {
						name: '转单',
						newsid: 6
					}, {
						name: '娃娃',
						newsid: 7
					}, ]
				}
			}
		},
		data() {
			return {
				tabIndex: 0,
				undeline: {},
				cacheTab: [],
				scrollInto: "",
				navigateFlag: false,
				indicatorLineLeft: 0,
				indicatorLineWidth: 0,
				isTap: false
			}
		},
		mounted() {
			this._lastTabIndex = 0;
			this.swiperWidth = 0;
			this.tabbarWidth = 0;
			this.tabListSize = {};
			this._touchTabIndex = 0;
			this.$nextTick(function() {
				this.switchTab(this.tabIndex);
				this.selectorQuery();
			})
		},
		methods: {
			showWidth(tab) {
				let length = tab.name.length;
				return (33 * length) + 'rpx';
			},
			ontabtap(e) {
				let index = e.target.dataset.current || e.currentTarget.dataset.current;
				//let offsetIndex = this._touchTabIndex = Math.abs(index - this._lastTabIndex) > 1;
				// // #ifdef APP-PLUS || H5 || MP-WEIXIN || MP-QQ
				this.isTap = true;
				var currentSize = this.tabListSize[index];
				var left = currentSize.left + currentSize.width/2 - this.undeline.width/2
				this.updateIndicator(left);
				this._touchTabIndex = index;
				// // #endif
				this.switchTab(index);
			},
			// onswiperscroll(e) {
			// 	if (this.isTap) {
			// 		return;
			// 	}
			// 	var offsetX = e.detail.dx;
			// 	var preloadIndex = this._lastTabIndex;
			// 	if (preloadIndex === this._lastTabIndex || preloadIndex < 0 || preloadIndex > this.pageList.length - 1) {
			// 		return;
			// 	}
			// 	if (this.pageList[preloadIndex].dataList.length === 0) {
			// 		console.log('preload data')
			// 		this.loadTabData(preloadIndex);
			// 	}
			// },
			// animationfinish(e) {
			// 	// #ifdef APP-PLUS || H5 || MP-WEIXIN || MP-QQ
			// 	let index = e.detail.current;
			// 	if (this._touchTabIndex === index) {
			// 		this.isTap = false;
			// 	}
			// 	this._lastTabIndex = index;
			// 	this.switchTab(index);
			// 	this.updateIndicator(this.tabListSize[index].left, this.tabListSize[index].width);
			// 	// #endif
			// },
			selectorQuery() {
				dom.getComponentRect(this.$refs.tabbar1, res => {
					this.tabbarWidth = res.size.width;
				});
				// 因 nvue 暂不支持 class 查询
				var queryTabSize = uni.createSelectorQuery().in(this);
				queryTabSize.select('#underline').boundingClientRect().exec(rect => {
					this.undeline = rect[0];
				});
				for (var i = 0; i < this.tabList.length; i++) {
					// queryTabSize.select('#' + this.tabList[i].id).boundingClientRect();
					queryTabSize.select('#' + 'tab' + i).boundingClientRect();
				}
				
				//遍历获取宽度
				queryTabSize.exec(rects => {
					rects.forEach((rect) => {
						this.tabListSize[rect.dataset.id] = rect;
					})
					//
					let thisRect = this.tabListSize[this.tabIndex]
					this.updateIndicator(thisRect.left + thisRect.width/2 - this.undeline.width/2);
					// this.updateIndicator(this.tabListSize[this.tabIndex].left, this.tabListSize[this.tabIndex]
					// 	.width);
					// this.switchTab(this.tabIndex);
				});
			},
			getElementSize(dom, ref, id) {
				dom.getComponentRect(ref, res => {
					this.tabListSize[id] = res.size;
				});
			},
			updateIndicator(left) {
				this.indicatorLineLeft = left;
			},
			switchTab(index) {
				if (this.tabIndex === index) {
					return;
				}
				this.tabIndex = index;
				this.scrollTabTo(index);
				this.scrollInto = this.tabList[index].id;
				this.loadTabData(index)
			},
			scrollTabTo(index) {
				const el = this.$refs['tabitem' + index][0];
				let offset = 0;
				// TODO fix ios offset
				if (index > 0) {
					offset = this.tabbarWidth / 2 - this.tabListSize[index].width / 2;
					if (this.tabListSize[index].right < this.tabbarWidth / 2) {
						// offset = this.tabListSize[0].width;
						offset = this.tabListSize[index].right;
					} else {}
				}
				dom.scrollToElement(el, {
					offset: -offset
				});
			},
			loadTabData(index) {
				console.log('加载数据')
				this.$emit('clickItem', index)
				// this.pageList[index].loadData();
			},
			clearTabData(index) {
				console.log('清除数据')
				this.$emit('clearData', index)
				// this.pageList[index].clear();
			}
		}
	}
</script>

<style>
	.tabs {
		flex-direction: column;
		overflow: hidden;
		background-color: #ffffff;
	}

	.tab-bar {
		width: 750rpx;
		height: 102rpx;
		flex-direction: row;
		align-items: center;
	}

	/* #ifndef APP-NVUE */
	.tab-bar ::-webkit-scrollbar {
		display: none;
		width: 0 !important;
		height: 0 !important;
		-webkit-appearance: none;
		background: transparent;
	}

	/* #endif */

	.scroll-view-indicator {
		position: relative;
		height: 6rpx;
		margin-top: 0rpx;
	}

	.scroll-view-underline {
		position: absolute;
		top: 0;
		bottom: 0;
		width: 0;
	}

	.scroll-view-animation {
		transition-duration: 0.2s;
		transition-property: left;
	}

	.tab-bar-line {
		height: 1px;
		background-color: #cccccc;
	}

	.tab-box {
		flex: 1;
	}

	.uni-tab-item {
		/* #ifndef APP-PLUS */
		display: inline-block;
		/* #endif */
		flex-wrap: nowrap;
		padding-left: 26rpx;
		padding-right: 26rpx;
	}

	.uni-tab-item-title {
		font-size: 28rpx;
		flex-wrap: nowrap;
		/* #ifndef APP-PLUS */
		white-space: nowrap;
		/* #endif */
		font-family: PingFang SC;
		font-weight: 400;
		color: #000000;
	}

	.uni-tab-item-title-active {
		font-size: 32rpx;
		font-family: PingFang SC;
		font-weight: bold;
		color: #000000;
		/* #ifndef APP-PLUS */
		white-space: nowrap;
		
		/* #endif */
	}

	.swiper-item {
		flex: 1;
		flex-direction: column;
	}

	.page-item {
		flex: 1;
		flex-direction: row;
		position: absolute;
		left: 0;
		top: 0;
		right: 0;
		bottom: 0;
	}
</style>
